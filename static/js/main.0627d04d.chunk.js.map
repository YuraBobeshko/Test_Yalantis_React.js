{"version":3,"sources":["Components/Months/listMonth.js","Components/TableUsers/TableUsers.js","Components/ListMonth/ListMonth.js","Components/ListUser/ListUser.js","Components/Users/Users.js","REST api/loadUser.js","App.js","serviceWorker.js","index.js"],"names":["listMonth","name","numeral","TableUsers","props","users","className","map","user","index","key","id","scope","firstName","lastName","dob","ListMonth","setSortBy","month","onMouseOver","cn","gray","setQuantityUsers","length","blue","green","red","href","ListUser","useState","sortBy","memoizedListUser","useMemo","filter","Date","getMonth","memoizedListMonth","Users","setUsers","useEffect","a","async","axios","get","loadUsers","then","data","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0627d04d.chunk.js","sourcesContent":["export const listMonth = [\r\n  { name: \"Январь\", numeral: 0 },\r\n  { name: \"Февраль\", numeral: 1 },\r\n  { name: \"Март\", numeral: 2 },\r\n  { name: \"Апрель\", numeral: 3 },\r\n  { name: \"Май\", numeral: 4 },\r\n  { name: \"Июнь\", numeral: 5 },\r\n  { name: \"Июль\", numeral: 6 },\r\n  { name: \"Август\", numeral: 7 },\r\n  { name: \"Сентябрь\", numeral: 8 },\r\n  { name: \"Октябрь\", numeral: 9 },\r\n  { name: \"Ноябрь\", numeral: 10 },\r\n  { name: \"Декабрь\", numeral: 11 }\r\n];","import React from 'react'\r\n\r\nexport default function TableUsers(props) {\r\n  \r\n  const { users } = props;\r\n  \r\n  return (\r\n    <table className=\"table table-hover\">\r\n    <thead className=\"table-inverse\">\r\n      <tr>\r\n        <td>#</td>\r\n        <td>firstName</td>\r\n        <td>lastName</td>\r\n        <td>dob</td>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {users.map((user, index) => {\r\n        return (\r\n          <tr key={user.id + user.name}>\r\n            <th scope=\"row\">{index}</th>\r\n            <td>{user.firstName}</td>\r\n            <td>{user.lastName}</td>\r\n            <td>{user.dob}</td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </tbody>\r\n  </table>\r\n  )\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport cn from \"classnames\";\r\n\r\nexport default function ListMonth(props) {\r\n  \r\n  const { listMonth, setSortBy } = props;\r\n\r\n  return (\r\n    <ul className=\"rounded\">\r\n    {listMonth.map(month => (\r\n      <li key={month.numeral} onMouseOver={() => setSortBy(month.numeral)}>\r\n        <a\r\n          className={cn({\r\n            gray: month.setQuantityUsers.length <= 3,\r\n            blue:\r\n              month.setQuantityUsers.length > 3 &&\r\n              month.setQuantityUsers.length <= 6,\r\n            green:\r\n              month.setQuantityUsers.length >= 7 &&\r\n              month.setQuantityUsers.length <= 10,\r\n            red: month.setQuantityUsers.length >= 11\r\n          })}\r\n          href=\"#\"\r\n        >\r\n          {month.name}\r\n        </a>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n  )\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState, useMemo } from \"react\";\r\nimport \"./ListUser.css\";\r\n\r\nimport { listMonth } from \"../Months/listMonth\";\r\nimport TableUsers from '../TableUsers/TableUsers'\r\nimport ListMonth from '..//ListMonth/ListMonth'\r\n\r\n\r\n\r\nexport default function ListUser(props) {\r\n  const [sortBy, setSortBy] = useState(0);\r\n\r\n  const { users } = props;\r\n\r\n  const memoizedListUser = useMemo(\r\n    () =>\r\n      users\r\n        ? users.filter(user => new Date(user.dob).getMonth() === sortBy)\r\n        : null,\r\n    [sortBy, users]\r\n  );\r\n\r\n  const memoizedListMonth = useMemo(\r\n    () =>\r\n      users\r\n        ? listMonth.map(month => {\r\n            return {\r\n              ...month,\r\n              setQuantityUsers: users.filter(\r\n                user => new Date(user.dob).getMonth() === month.numeral\r\n              )\r\n            };\r\n          })\r\n        : null,\r\n    [users]\r\n  );\r\n\r\n  if (!users) return <p>Loading...</p>;\r\n  return (\r\n    <>\r\n      <ListMonth listMonth={memoizedListMonth} setSortBy={setSortBy}/>\r\n      <TableUsers users={memoizedListUser} /> \r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ListUser from \"../ListUser/ListUser\";\r\nimport loadUsers from \"../../REST api/loadUser\";\r\n\r\nexport default function Users() {\r\n  const [users, setUsers] = useState(null);\r\n  useEffect(() => {\r\n    loadUsers().then(({ data }) => setUsers(data));\r\n  }, []);\r\n\r\n  return <ListUser users={users} />;\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default async function loadUser() {\r\n  const users = await axios.get(`https://yalantis-react-school.herokuapp.com/api/task0/users`)\r\n  return users;\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Users from './Components/Users/Users'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Users />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}